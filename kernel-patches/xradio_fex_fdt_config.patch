
## hyphop ##

--- kernel-mizy.ro/drivers/net/wireless/xradio/platform.h	2017-01-24 00:39:46.000000000 +0700
+++ kernel-mizy.rw/drivers/net/wireless/xradio/platform.h	2017-05-06 13:21:28.548165203 +0700
@@ -38,6 +38,9 @@ extern int sw_mci_check_r1_ready(struct
 #endif
 /* the rf_pm api */
 extern int wifi_pm_gpio_ctrl(char *name, int level);
+extern int wifi_pm_set(char *name);
+extern void wifi_pm_power(int on);
+
 /* platform interfaces */
 int  xradio_plat_init(void);
 void xradio_plat_deinit(void);
--- kernel-mizy.ro/drivers/net/wireless/xradio/platform.c	2017-01-24 00:39:46.000000000 +0700
+++ kernel-mizy.rw/drivers/net/wireless/xradio/platform.c	2017-05-09 11:29:34.200483919 +0700
@@ -10,6 +10,9 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
+// ## hyphop ## fex/fdt config fix
+
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/err.h>
@@ -38,11 +41,15 @@ static u32 wlan_irq_gpio   = 0;
 static u32 wlan_reset_gpio = 0;
 
 #if (PLATFORM_SYSCONFIG)
-#define WIFI_CONFIG        "wifi_para"
 #define MAX_POWER_NUM      3
 static char * axp_name[MAX_POWER_NUM]  = {0};
 #endif
 
+#define WIFI_CONFIG        "wifi_para"
+#define WIFI_CONFIG_H2     "wifi_para_h2"
+
+static char *wifi_para = WIFI_CONFIG_H2 "\0\0\0\0\0";
+
 //--------------------------------------------------
 //Select one platform if PLATFORM_RFKILL_PM=0.
 //And you can platforms too.
@@ -711,13 +718,26 @@ static int xradio_get_syscfg(void)
 
 	/* Get SDIO/USB config. */
 #if defined(CONFIG_XRADIO_SDIO)
-	type = script_get_item(WIFI_CONFIG, "wifi_sdc_id", &val);
+//	type = script_get_item(WIFI_CONFIG, "wifi_sdc_id", &val);
+	type = script_get_item(wifi_para, "wifi_sdc_id", &val);
+
+	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
+	    strcpy(wifi_para, WIFI_CONFIG);
+	    printk("xradio try %s", wifi_para);
+	    type = script_get_item(wifi_para, "wifi_sdc_id", &val);
+	} else {
+	}
+
 	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
 		printk(KERN_ERR "failed to fetch sdio card's sdcid\n");
 		return -1;
 	}
+
+        printk("xradio use %s", wifi_para);
+
 #elif defined(CONFIG_XRADIO_USB)
-	type = script_get_item(WIFI_CONFIG, "wifi_usbc_id", &val);
+//	type = script_get_item(WIFI_CONFIG, "wifi_usbc_id", &val);
+	type = script_get_item(wifi_para, "wifi_usbc_id", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
 		printk(KERN_ERR "failed to fetch usb's id\n");
 		return -1;
@@ -726,14 +746,16 @@ static int xradio_get_syscfg(void)
 	wlan_bus_id = val.val;
 
 	/* Get GPIO config. */
-	type = script_get_item(WIFI_CONFIG, "wl_reg_on", &val);
+//	type = script_get_item(WIFI_CONFIG, "wl_reg_on", &val);
+	type = script_get_item(wifi_para, "wl_reg_on", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_PIO != type) {
 		printk(KERN_ERR "failed to fetch wl_reg_on\n");
 		return -1;
 	}
 	wlan_reset_gpio = val.gpio.gpio;
 
-	type = script_get_item(WIFI_CONFIG, "wl_host_wake", &val);
+//	type = script_get_item(WIFI_CONFIG, "wl_host_wake", &val);
+	type = script_get_item(wifi_para, "wl_host_wake", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_PIO != type) {
 		printk(KERN_ERR "failed to fetch xradio_wl_host_wake\n");
 		return -1;
@@ -742,21 +764,24 @@ static int xradio_get_syscfg(void)
 
 	/* Get Power config. */
 #if 0
-	type = script_get_item(WIFI_CONFIG, "wifi_power", &val);
+//	type = script_get_item(WIFI_CONFIG, "wifi_power", &val);
+	type = script_get_item(wifi_para, "wifi_power", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_STR == type) {
 		axp_name[0] = val.str;
 		printk("wifi_power=%s\n", axp_name[0]);
 	} else {
 		printk(KERN_ERR "wifi_power not config\n");
 	}
-	type = script_get_item(WIFI_CONFIG, "wifi_power_ext1", &val);
+//	type = script_get_item(WIFI_CONFIG, "wifi_power_ext1", &val);
+	type = script_get_item(wifi_para, "wifi_power_ext1", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_STR == type) {
 		axp_name[1] = val.str;
 		printk("wifi_power_ext1=%s\n", axp_name[1]);
 	} else {
 		printk(KERN_ERR "wifi_power_ext1 not config\n");
 	}
-	type = script_get_item(WIFI_CONFIG, "wifi_power_ext2", &val);
+//	type = script_get_item(WIFI_CONFIG, "wifi_power_ext2", &val);
+	type = script_get_item(WIFI_para, "wifi_power_ext2", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_STR == type) {
 		axp_name[2] = val.str;
 		printk("wifi_power_ext2=%s\n", axp_name[2]);
@@ -816,6 +841,9 @@ int xradio_wlan_power(int on)
 
 #if (PLATFORM_RFKILL_PM)
 	//wifi_pm_power(on);
+//	wifi_pm_set( WIFI_CONFIG );
+	wifi_pm_set( wifi_para );
+
 	wifi_pm(on);
 	mdelay(50);
 #else //PLATFORM_RFKILL_PM
--- kernel-mizy.ro/drivers/misc/rf_pm/wifi_pm.c	2017-01-24 00:39:46.000000000 +0700
+++ kernel-mizy.rw/drivers/misc/rf_pm/wifi_pm.c	2017-05-06 13:56:27.812237387 +0700
@@ -10,12 +10,13 @@
 #include <linux/scatterlist.h>
 #include "module_pm.h"
 
-static char *wifi_para = "wifi_para";
+static char *wifi_para = "wifi_para\0\0\0\0\0";
 struct wl_func_info  wl_info;
 
 extern int sunxi_gpio_req(struct gpio_config *gpio);
 extern int rf_module_power(int onoff);
 extern int rf_pm_gpio_ctrl(char *name, int level);
+
 #define wifi_pm_msg(...)    do {printk("[wifi_pm]: "__VA_ARGS__);} while(0)
 
 #if defined(CONFIG_ARCH_SUN6I) || defined(CONFIG_ARCH_SUN7I)
@@ -28,6 +29,8 @@ extern int sunxi_usb_disable_hcd(__u32 u
 extern int sunxi_usb_enable_hcd(__u32 usbc_no);
 #endif
 
+EXPORT_SYMBOL(wifi_para);
+
 void wifi_pm_power(int on)
 {
 	int on_off = 0;
@@ -46,10 +49,12 @@ void wifi_pm_power(int on)
 }
 EXPORT_SYMBOL(wifi_pm_power);
 
+
 int wifi_pm_gpio_ctrl(char *name, int level)
 {
 	int i = 0;
 	int gpio = 0;
+
 	char * gpio_name[1] = {"wl_reg_on"};
 
 	for (i = 0; i < 1; i++) {
@@ -79,7 +84,7 @@ static void scan_device(int onoff)
 	int usb_id = -1;
 	script_item_u val;
 	script_item_value_type_e type;
-	type = script_get_item("wifi_para", "wifi_sdc_id", &val);
+	type = script_get_item( wifi_para, "wifi_sdc_id", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
 		wifi_pm_msg("get wifi_sdc_id failed\n");
 	} else {
@@ -90,7 +95,7 @@ static void scan_device(int onoff)
 		sunxi_mci_rescan_card(sdc_id, onoff);
 #endif
 	}
-	type = script_get_item("wifi_para", "wifi_usbc_id", &val);
+	type = script_get_item( wifi_para , "wifi_usbc_id", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
 		wifi_pm_msg("get wifi_sdc_id failed\n");
 	} else {
@@ -181,7 +186,7 @@ static int wifi_pm_get_res(void)
 	script_item_u val;
 	struct gpio_config  *gpio_p = NULL;
 
-	type = script_get_item(wifi_para, "wifi_used", &val);
+	type = script_get_item( wifi_para, "wifi_used", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_INT != type) {
 		wifi_pm_msg("failed to fetch wifi configuration!\n");
 		return -1;
@@ -193,7 +198,7 @@ static int wifi_pm_get_res(void)
 	wl_info.wifi_used = val.val;
 
 	wl_info.wl_reg_on = -1;
-	type = script_get_item(wifi_para, "wl_reg_on", &val);
+	type = script_get_item( wifi_para, "wl_reg_on", &val);
 	if (SCIRPT_ITEM_VALUE_TYPE_PIO!=type)
 		wifi_pm_msg("get wl_reg_on gpio failed\n");
 	else {
@@ -264,6 +269,17 @@ out:
 }
 EXPORT_SYMBOL(wifi_hwaddr_from_chipid);
 
+int wifi_pm_set(char *name){
+//    printk("wifi_para_old %s\n", wifi_para);
+//    wifi_para = name;
+    strcpy(wifi_para, name);
+    printk("wifi_para %s\n", wifi_para);
+    wifi_pm_get_res();
+}
+
+EXPORT_SYMBOL(wifi_pm_set);
+
+
 static int __devinit wifi_pm_probe(struct platform_device *pdev)
 {
 	awwifi_procfs_attach();
